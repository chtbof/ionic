=================================================
(1) 建立網站部分
=================================================
d:
express web -ejs
cd web
npm install 
npm install mysql --save
npm start



=================================================
(2) db.js
=================================================
var mysql = require('mysql');

//------------------------
// 建立資料庫連線池
//------------------------
var pool  = mysql.createPool({
    user: 'root',
    password: 'mysql',
    host: '127.0.0.1',
    database: 'mydb', 
    waitForConnections : true, 
    connectionLimit : 10       
});

//----------------------------
// 引用此模組時將匯出pool物件
//----------------------------
module.exports = pool;



=================================================
(3) app.js, 增加json spaces的設定
=================================================
var express = require('express');
var path = require('path');
var favicon = require('serve-favicon');
var logger = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');

var index = require('./routes/index');
var users = require('./routes/users');

var app = express();

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');

//------------------------------
app.set('json spaces', 4);
//------------------------------

// uncomment after placing your favicon in /public
//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));
app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.use('/', index);
app.use('/users', users);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  var err = new Error('Not Found');
  err.status = 404;
  next(err);
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

module.exports = app;



=================================================
(4) index.js
=================================================
var express = require('express');
var router = express.Router();

//-----------------------
// 引用db.js
//-----------------------
var pool = require('./db.js');


//----------------
// GET請求
//----------------
router.get('/', function(req, res, next) {	
    sendData(res);
});

//----------------
// POST請求
//----------------
router.post('/', function(req, res, next) {	
    sendData(res);
});

//--------------------
// 回傳JSON資料
//--------------------
function sendData(res){
    pool.query('select * from scene', function (error, results, fields) {
        //============================	
        //回傳資料(初值為空陣列)
        //============================			
        var data=[];
		
        if (error){			
            res.send(JSON.stringify(data));
        }else{			
            for(var i=0; i<results.length; i++){
                //========================================			
                //逐行取出資料庫每一筆記錄的各欄位資料
                //========================================				
                var name=results[i].Name;
                var description=results[i].Description;	
                var tel=results[i].Tel;					
                var addr=results[i].Add;	
                var latitude=results[i].Latitude;	
                var longitude=results[i].Longitude;	
                var picture=results[i].Picture;	
                var recommender=results[i].Recommender;
                var recommenderPic=results[i].RecommenderPic;                

                //========================================				
                //將一筆記錄加入item物件中
                //========================================				
                var item={};
                item.name=name;
                item.desc=description;
                item.tel=tel;
                item.addr=addr;
                item.lat=latitude;
                item.lng=longitude;
                item.pic=picture;   
                item.reco=recommender;  
                item.recoPic=recommenderPic;  

                //========================================					
                //將item物件加入data陣列中
                //========================================					
                data.push(item);
            }	

            //================================================			
            //資料庫中所有資料都加入data陣列後,		
            //將data轉為JSON格式字串, 回傳給呼叫者
            //================================================			
            res.json(data);
        }       
    });
}

module.exports = router;



